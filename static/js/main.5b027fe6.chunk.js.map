{"version":3,"sources":["lnz.digital.svg","ProgressCircle.js","App.js","reportWebVitals.js","index.js"],"names":["ProgressCircle","createReactClass","getInitialState","donutval","updateVal","e","this","setState","target","value","render","className","ProgressCircleBar","state","onChange","type","min","max","placeHolder","getDefaultProps","valuelabel","sideNotess","size","strokewidth","halfsize","props","threeSize","radius","circumference","Math","PI","dashval","percentageAmount","requestServicePercentageSaved","round","trackstyle","strokeWidth","indicatorstyle","strokeDasharray","rotateval","width","height","r","cx","cy","transform","style","x","y","textAnchor","App","src","logo","alt","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"wMAAe,G,WAAA,IAA0B,yC,+BCIrCA,EAAiBC,IAAiB,CAAC,YAAD,iBAElCC,gBAFkC,WAGhC,MAAM,CACJC,SAAS,KAGbC,UAPkC,SAOxBC,GACRC,KAAKC,SAAS,CAACJ,SAASE,EAAEG,OAAOC,SAEnCC,OAVkC,WAWhC,OACE,sBAAKC,UAAU,gCAAf,UACE,cAACC,EAAD,CAAmBH,MAAOH,KAAKO,MAAMV,WACrC,uBACA,qBAAKQ,UAAU,iBAAf,SACA,wBAAOA,UAAU,aAAjB,0CAA2D,uBACzD,uBAAOA,UAAU,iBAAiBG,SAAUR,KAAKF,UAAYW,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKC,YAAY,sBAO5GN,EAAoBX,IAAiB,CAAC,YAAD,oBAOzCkB,gBAPyC,WAQvC,MAAO,CACLV,MAAM,GACNW,WAAW,oBACXC,WAAY,0BACZC,KAAK,IACLC,YAAY,KAGhBb,OAhByC,WAkBvC,IAAMc,EAA8B,GAAlBlB,KAAKmB,MAAMH,KACvBI,EAA+B,GAAlBpB,KAAKmB,MAAMH,KAAa,GACrCK,EAASH,EAAqC,GAAzBlB,KAAKmB,MAAMF,YAChCK,EAAgB,EAAIC,KAAKC,GAAKH,EAE9BI,EADczB,KAAKmB,MAAMhB,MAAQmB,EAAiB,GAC3B,IAAMA,EAK7BI,EAA2C,MAFxB1B,KAAKmB,MAAMhB,MAAQ,GACKH,KAAKmB,MAAMhB,OAEtDwB,EAAgCJ,KAAKK,MAAMF,GAI3CG,EAAa,CAACC,YAAa9B,KAAKmB,MAAMF,aACtCc,EAAiB,CAACD,YAAa9B,KAAKmB,MAAMF,YAAae,gBAAiBP,GACxEQ,EAAY,cAAcf,EAAS,IAAIA,EAAS,IAGtD,OACE,sBAAKgB,MAAOlC,KAAKmB,MAAMH,KAAMmB,OAAQnC,KAAKmB,MAAMH,KAAMX,UAAU,kBAAhE,UACE,wBAAQ+B,EAAGf,EAAQgB,GAAInB,EAAUoB,GAAIpB,EAAUqB,UAAWN,EAAWO,MAAOX,EAAYxB,UAAU,0BAClG,wBAAQ+B,EAAGf,EAAQgB,GAAInB,EAAUoB,GAAIpB,EAAUqB,UAAWN,EAAWO,MAAOT,EAAgB1B,UAAU,8BACtG,uBAAMA,UAAU,uBAAuBoC,EAAGvB,EAAUwB,EAAGxB,EAAUsB,MAAO,CAACG,WAAW,UAApF,UACE,uBAAOtC,UAAU,2BAAjB,SAA6CsB,IAC7C,uBAAOtB,UAAU,+BAAjB,eACA,uBAAOA,UAAU,6BAA6BoC,EAAGvB,EAAUwB,EAAGtB,EAA9D,SAA0EpB,KAAKmB,MAAML,aACrF,uBAAOT,UAAU,6BAA6BoC,EAAGvB,EAAUwB,EAAGtB,EAAW,GAAzE,SAA8EpB,KAAKmB,MAAMJ,sBAMtFrB,ICtDAkD,MAtBf,WACE,OACE,qBAAKvC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACA,iDACE,qBAAKwC,IAAKC,EAAMzC,UAAU,WAAW0C,IAAI,SACzC,4BACE,cAAC,EAAD,MAEF,mBACE1C,UAAU,WACV2C,KAAK,4BACL9C,OAAO,SACP+C,IAAI,sBAJN,+BCDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASvD,OACP,cAAC,IAAMwD,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.5b027fe6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/lnz.digital.e844e577.svg\";","import createReactClass from 'create-react-class';\r\nimport PropTypes from 'prop-types';\r\nimport './ProgressCircle.css';\r\n\r\nvar ProgressCircle = createReactClass({\r\n \r\n    getInitialState(){\r\n      return{\r\n        donutval:10\r\n      }\r\n    },\r\n    updateVal(e){\r\n      this.setState({donutval:e.target.value})\r\n    },\r\n    render(){\r\n      return(\r\n        <div className=\"ProgressCircleElementsWrapper\">\r\n          <ProgressCircleBar value={this.state.donutval} />\r\n          <br/>\r\n          <div className=\"inputWrapperss\">\r\n          <label className=\"inputLabel\">Enter a value from 0 - 60 min<br/>\r\n            <input className=\"newCircleValue\" onChange={this.updateVal}  type=\"number\" min=\"3\" max=\"60\" placeHolder=\"10 min\" />\r\n            </label>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n  });\r\n  const ProgressCircleBar = createReactClass({\r\n    propTypes: {\r\n      value: PropTypes.number,        // value the chart should show\r\n      valuelabel: PropTypes.string,   // label for the chart\r\n      size: PropTypes.number,         // diameter of chart\r\n      strokewidth: PropTypes.number   // width of chart line\r\n    },\r\n    getDefaultProps() {\r\n      return {\r\n        value:10,\r\n        valuelabel:'Reduction in time',\r\n        sideNotess: 'using latest technology',\r\n        size:350,\r\n        strokewidth:25\r\n      };\r\n    },\r\n    render() {\r\n      // Equations for Circle\r\n      const halfsize = (this.props.size * 0.5);\r\n      const threeSize = (this.props.size * 0.5 + 32);\r\n      const radius = halfsize - (this.props.strokewidth * 0.5);\r\n      const circumference = 2 * Math.PI * radius;\r\n      const strokeval = ((this.props.value * circumference) / 60);\r\n      const dashval = (strokeval + ' ' + circumference);\r\n      \r\n      // Equation for Percentage Value - Input and Display\r\n      const priceDifference = (this.props.value - 3);\r\n      const priceDifferenceDivide = (priceDifference / this.props.value);\r\n      const percentageAmount = priceDifferenceDivide * 100;\r\n      const requestServicePercentageSaved = Math.round(percentageAmount);\r\n\r\n\r\n      // Moving the Overlay Circle for Progress\r\n      const trackstyle = {strokeWidth: this.props.strokewidth};\r\n      const indicatorstyle = {strokeWidth: this.props.strokewidth, strokeDasharray: dashval}\r\n      const rotateval = 'rotate(-90 '+halfsize+','+halfsize+')';\r\n      \r\n  \r\n      return (\r\n        <svg width={this.props.size} height={this.props.size} className=\"progress-circle\">\r\n          <circle r={radius} cx={halfsize} cy={halfsize} transform={rotateval} style={trackstyle} className=\"progress-circle-track\"/>\r\n          <circle r={radius} cx={halfsize} cy={halfsize} transform={rotateval} style={indicatorstyle} className=\"progress-circle-indicator\"/>\r\n          <text className=\"progress-circle-text\" x={halfsize} y={halfsize} style={{textAnchor:'middle'}} >\r\n            <tspan className=\"progress-circle-text-val\">{requestServicePercentageSaved}</tspan>\r\n            <tspan className=\"progress-circle-text-percent\">%</tspan>\r\n            <tspan className=\"progress-circle-text-label\" x={halfsize} y={threeSize}>{this.props.valuelabel}</tspan>\r\n            <tspan className=\"progress-circle-text-label\" x={halfsize} y={threeSize +29}>{this.props.sideNotess}</tspan>\r\n          </text>\r\n        </svg>\r\n      );\r\n    }\r\n  })\r\nexport default ProgressCircle","import './App.css';\nimport logo from './lnz.digital.svg';\nimport ProgressCircle from './ProgressCircle';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <h1>Progress Circle</h1>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          <ProgressCircle/>\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/linzof\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          LNZ.Digital\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}